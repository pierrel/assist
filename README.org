Assist is an extensible llm-based assistant. It currently provides an OpenAI-comparible API with a ReAct agent and some simple tools. It's currently very tailored to Emacs, but hopefully can be extended in the future to handle other editors.

It is not /just/ a coding assistant, but should be able to help with any project or goal.
* Concepts
** Project
This is based on the currently-active buffer and uses projectile to decide what the root directory of the project is.

(todo) If there are multiple buffers from different projects open, then:
1. Take the project with the most open buffers
2. Take the first (alphabetical order)
** Context
The information needed to perform a task. For example, the source files for a software project
** Extra context
Supporting information
* Dependencies
Install dependencies

#+begin_src shell
pip install -r requirements.txt
#+end_src

Enable the virtual environment

#+begin_src shell
source .venv/bin/activate
#+end_src

In emacs: =M-x pyvenv-activate=
* Running
Run the server

#+begin shell
python src/assist/server.python
#+end_shell
* Development
Install the package in editable mode so Emacs/Elpy can discover the modules:

#+begin_src shell
pip install -e .
#+end_src

Run the tests with:

#+begin_src shell
pytest
#+end_src

Run the integration tests with:

#+begin_src shell
pytest tests/integration
#+end_src
* User flows
These are the main user flows for working with Assist
** Re-write
I want to highlight a region and ask that it be re-written in a certain way.
** Explain/describe
When I first open a project, I want to have a high-level overview of it. This should be fairly straightforward to ask while working on the project. Probably should generate automatically when there is no explanation or when the explanation was created long before the current version (check git?).
** Suggest
Make recommendations on what to do next or what to update as you're editing. Find bugs and make the recommendations somewhere.
** Large changes
I want to be able to ask for meaningfully large changes like refactors or implementation of whole features.
